$link-color: rgb(152, 185, 217);

$primary: #156464;

$input-bg: #161618;

$input-color: #ffffff;
$input-border-color: $input-bg;

$input-focus-bg: $input-bg;
$input-focus-border-color: #000;
$input-focus-color: $input-color;

$input-placeholder-color: #898989;
$input-plaintext-color: #898989;

$bs-alert-color: #FF8C97;
$bs-alert-bg: #3D181C;

@import 'bootstrap/scss/bootstrap';

$spacer: 2rem;
$spacers: ();
$spacers: map-merge((
	0: 0,
	1: ($spacer * .25),
	2: ($spacer * .5),
	3: ($spacer * 1),
	4: ($spacer * 1.5),
	5: ($spacer * 2),
	6: ($spacer * 2.5),
	7: ($spacer * 3),
	8: ($spacer * 3.5),
	9: ($spacer * 4),
	10: ($spacer * 4.5)
), $spacers);

$grid-breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
	xxl: 1400px
) !default;

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $prop, $abbrev in (margin: m, padding: p) {
			@each $size, $length in $spacers {
				.#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
				.#{$abbrev}t#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-top: $length !important;
				}
				.#{$abbrev}r#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-right: $length !important;
				}
				.#{$abbrev}b#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-bottom: $length !important;
				}
				.#{$abbrev}l#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-left: $length !important;
				}
			}
		}

		// Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
		@each $size, $length in $spacers {
			@if $size != 0 {
				.m#{$infix}-n#{$size} { margin: -$length !important; }
				.mt#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-top: -$length !important;
				}
				.mr#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-right: -$length !important;
				}
				.mb#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-bottom: -$length !important;
				}
				.ml#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-left: -$length !important;
				}
			}
		}

		// Some special margin utils
		.m#{$infix}-auto { margin: auto !important; }
		.mt#{$infix}-auto,
		.my#{$infix}-auto {
			margin-top: auto !important;
		}
		.mr#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-right: auto !important;
		}
		.mb#{$infix}-auto,
		.my#{$infix}-auto {
			margin-bottom: auto !important;
		}
		.ml#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-left: auto !important;
		}
	}
}

:root {
	color-scheme: dark;
}

body {
	padding-right: 0 !important;
	overflow: unset !important;
}

body.disable-scroll {
	overflow: hidden !important;
}

.spectrum {
	margin-top: 1rem;
	margin-bottom: 1rem;
	height: 5px;
	border-top: 0;
	background: #c4e17f;
	border-radius: 5px;
	background-image: linear-gradient(to right, #c4e17f, #c4e17f 12.5%, #f7fdca 12.5%, #f7fdca 25%, #fecf71 25%, #fecf71 37.5%, #f0776c 37.5%, #f0776c 50%, #db9dbe 50%, #db9dbe 62.5%, #c49cde 62.5%, #c49cde 75%, #669ae1 75%, #669ae1 87.5%, #62c2e4 87.5%, #62c2e4);
}

.form-control.ng-touched.ng-invalid,
.ng-submitted .form-control.ng-invalid{
	box-shadow: 0 0 0 0.25rem rgba(255, 0, 0, 0.25) !important;
}

.color-white {
	color: #eaeaea;
}

.color-black {
	color: black;
}

$color-blue: #409ae8;
$color-light-gray: #98a6ad;
$color-dark-gray: #212529;
$color-gray: #2c3238;

body, .modal-content {
	background: $color-dark-gray;
}

.color-blue {
	color: $color-blue
}

.background-color-blue {
	background-color: $color-blue
}

.color-light-gray {
	color: $color-light-gray;
}

.background-color-light-gray {
	background-color: $color-light-gray;
}

.background-color-gray {
	background-color: $color-gray;
}

.background-color-dark-gray {
	background-color: $color-dark-gray;
}

.color-twitch {
	 color: #9146FF;
 }

.background-color-twitch {
	background-color: #9146FF;
}

.cursor-pointer {
	cursor: pointer;
}

.rounded {
	border-radius: .5rem;
}

.map-modal .modal-dialog {
	max-width: 97% !important;

	iframe {
		height: 86vh;
	}
}

[hoverBrightness] {
	transition: background-color 0.3s ease;
}

button.no-style {
	background: unset;
	border: unset;

	&:focus-visible {
		outline: unset;
	}
}

@keyframes fadeIn {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

.fade-in {
	opacity: 0;
	animation: fadeIn .5s forwards;
}

img.emoji {
	height: 1em;
	width: 1em;
	margin: 0 .05em 0 .1em;
	vertical-align: -0.1em;
}

.float-right {
	float: right;
}

.float-left {
	float: left;
}

[data-tooltip] {
	position: relative;
	z-index: 2;
	cursor: pointer;
}

[data-tooltip]:before,
[data-tooltip]:after {
	visibility: hidden;
	opacity: 0;
	pointer-events: none;

	@media print {
		display: none;
	}
}

[data-tooltip]:before {
	position: absolute;
	bottom: 150%;
	left: 50%;
	margin-bottom: 5px;
	margin-left: -60px;
	padding: 7px;
	width: max-content;
	border-radius: 3px;
	background-color: hsl(0, 0%, 5%);
	color: #fff;
	content: attr(data-tooltip);
	text-align: center;
	font-size: 1rem;
	line-height: 1.2;
}

[data-tooltip]:after {
	position: absolute;
	bottom: 150%;
	left: 50%;
	margin-left: -5px;
	width: 0;
	background-color: hsl(0, 0%, 5%);
	border-right: 5px solid transparent;
	border-left: 5px solid transparent;
	content: " ";
	font-size: 0;
	line-height: 0;
}

[data-tooltip]:hover:before,
[data-tooltip]:hover:after {
	visibility: visible;
	opacity: 1;
}

$font-sizes: (
	0_75: 0.75rem,
	1: 1rem,
	1_125: 1.125rem,
	1_25: 1.25rem,
	1_5: 1.5rem,
	1_75: 1.75rem,
	2: 2rem,
	2_25: 2.25rem,
	2_5: 2.5rem,
	2_75: 2.75rem,
	3: 3rem,
	3_25: 3.25rem,
	3_5: 3.5rem,
	3_75: 3.75rem,
	4: 4rem,
	4_25: 4.25rem,
	4_5: 4.5rem,
	4_75: 4.75rem
);

$breakpoints: (
	'': 0,
	'sm': 576px,
	'md': 768px,
	'lg': 992px,
	'xl': 1200px
);

@each $breakpoint-name, $min-width in $breakpoints {
	@if $breakpoint-name == '' {
		@each $size-name, $size-value in $font-sizes {
			.font-rem-#{$size-name} {
				font-size: $size-value;
			}
		}

		.font-size-default {
			font-size: map-get($font-sizes, '1_125');
		}
	} @else {
		@media (min-width: $min-width) {
			@each $size-name, $size-value in $font-sizes {
				.font-rem-#{$breakpoint-name}-#{$size-name} {
					font-size: $size-value;
				}
			}

			.font-size-#{$breakpoint-name}-default {
				font-size: map-get($font-sizes, '1_125');
			}
		}
	}
}

$width-steps: 21;

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@for $i from 0 through $width-steps - 1 {
			$width-value: $i * 5;

			.w#{$infix}-#{$width-value} {

				width: #{$width-value}#{"%"} !important;
			}

			.min-w#{$infix}-#{$width-value} {
				min-width: #{$width-value}#{"%"} !important;
			}

			.max-w#{$infix}-#{$width-value} {
				max-width: #{$width-value}#{"%"} !important;
			}
		}

		.w#{$infix}-auto {
			width: auto !important;
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
	}
}

